"""
迭代多个序列
我们想要迭代的元素包含在多个序列中，我们想同时对它们进行迭代。


zip(a, b)的工作原理是创建出一个迭代器，该迭代器可产生出元组(x, y)，
这里的 x 取自 序列 a，而 y 取自序列 b。
当其中某个输入序列中没有元素可以继续迭代时，整个迭代 过程结束。因此，整个迭代的长度和其中最短的输入序列长度相同。
"""
# 使用zip()函数可以将多个序列同时迭代
xpts = [1, 5, 4, 2, 10, 7]
ypts = [101, 78, 37, 15, 62, 99] 
for x, y in zip(xpts, ypts):
    print(x, y)
# 输出:
# 1 101
# 5 78  
# 4 37
# 2 15
# 10 62
# 7 99

# zip()创建了一个迭代器,可以配合list()等函数使用
a = [1, 2, 3]
b = ['w', 'x', 'y', 'z']
print(list(zip(a,b)))
# 输出:
# [(1, 'w'), (2, 'x'), (3, 'y')]

# 使用dict可以构建字典
print(dict(zip(a,b)))   
# 输出:
# {1: 'w', 2: 'x', 3: 'y'}

# 如果想要迭代的序列长度不同,可以使用itertools.zip_longest()函数
# 它会用None或指定的填充值来填充缺失的值,直到最长的序列迭代完成
from itertools import zip_longest
for i in zip_longest(a,b):
    print(i)
# 输出:
# (1, 'w')
# (2, 'x') 
# (3, 'y')
# (None, 'z')

# 可以指定填充值
for i in zip_longest(a, b, fillvalue=0):
    print(i)
# 输出:
# (1, 'w')
# (2, 'x')
# (3, 'y')
# (0, 'z')

# zip函数也支持更多个序列
a = [1, 2, 3]
b = [4, 5, 6]
c = [7, 8, 9]
print(list(zip(a,b,c)))
# 输出:
# [(1, 4, 7), (2, 5, 8), (3, 6, 9)]


